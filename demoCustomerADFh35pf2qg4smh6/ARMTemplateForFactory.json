{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demoCustomerADFh35pf2qg4smh6"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"AzureSynapseAnalyticsStaging_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalyticsStaging'"
		},
		"AzureSynapseOperational_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseOperational'"
		},
		"customerStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'customerStorageLinkedService'"
		},
		"source_linkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'source_linkedservice'"
		},
		"publicStorageLinkedService_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'publicStorageLinkedService'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SynapseAndSqlDataLoaderWithDataShare')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Verify Master Key",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Current Schema Has More Columns",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Current Schema Has Same Columns",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Current Schema Has Less Columns",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "IF (select Count(*) from sys.symmetric_keys where name like '%DatabaseMasterKey%') = 0\n\nBEGIN\n\nCREATE master key;\n\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'BritishColumbia' )\n\n    EXEC('CREATE SCHEMA [BritishColumbia] AUTHORIZATION [dbo]');\nselect Count(*) from sys.symmetric_keys;\n\n\nEND\n\nELSE \n\nBEGIN\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'BritishColumbia' )\n\n    EXEC('CREATE SCHEMA [BritishColumbia] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n",
								"queryTimeout": "00:05:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsStagingTableSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Verify Schema in SQL DB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Verify Master Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "IF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'BritishColumbia') \n\nBEGIN\n\n    EXEC('CREATE SCHEMA [BritishColumbia] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
								"queryTimeout": "00:05:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDbStagingSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LoadIntoStagingTable_SynapseWithSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Verify Schema in SQL DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadIntoStagingTable_SynapseWithSQL_from_DataShare",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCSV": {},
									"SynapseStagingSink": {},
									"SQLStagingSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "customerStorageLinkedService",
									"type": "LinkedServiceReference"
								},
								"folderPath": "receivedcopy"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "LoadIntoOperationalTable_SynapseWithSQL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Compare Data Type",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadIntoOperationalTable_SynapseWithSQL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSynapseStagingTable": {},
									"sourceSqlDbStaging": {},
									"SynapseOperationalTable": {},
									"SqlOperationalSink": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "customerStorageLinkedService",
									"type": "LinkedServiceReference"
								},
								"folderPath": "receivedcopy"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Create Views in Synapse",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LoadIntoOperationalTable_SynapseWithSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'BritishColumbia') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'BritishColumbia_view')\n    EXEC('create view BritishColumbia.BritishColumbia_view as select Load_Date, Load_Time, Record_Date, Region, New_Tests, Total_Tests, Positivity, Turn_Around from BritishColumbia.operationalBritishColumbia;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
								"queryTimeout": "00:10:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsStagingTableSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Create Views in SQL DB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LoadIntoOperationalTable_SynapseWithSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'BritishColumbia') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'BritishColumbia_view')\n    EXEC('create view BritishColumbia.BritishColumbia_view as select Load_Date, Load_Time, Record_Date, Region, New_Tests, Total_Tests, Positivity, Turn_Around from BritishColumbia.operationalBritishColumbia;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
								"queryTimeout": "00:05:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlDbStagingSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Retain Previous Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Current Schema Has More Columns",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Current Schema Has Same Columns",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Current Schema Has Less Columns",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "save_current_schema_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "retain_last_schema_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Save Current Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Retain Previous Schema",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "source_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "save_current_schema_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get_Metadata_Of_Last_CSV",
						"description": "test",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "save_current_schema_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure",
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get_Metadata_Of_Current_CSV",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "source_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure",
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Current Schema Has Less Columns",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get_Metadata_Of_Last_CSV",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get_Metadata_Of_Current_CSV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait And Continue 1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Alert Current Schema Has Less Columns",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Current Schema Has More Columns",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get_Metadata_Of_Last_CSV",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get_Metadata_Of_Current_CSV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get_Metadata_Of_Current_CSV').output.columnCount,activity('Get_Metadata_Of_Last_CSV').output.columnCount)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait And Continue 2",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Alert Current Schema Has More Columns",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Current Schema Has Same Columns",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get_Metadata_Of_Last_CSV",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get_Metadata_Of_Current_CSV",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount),not(equals(activity('Get_Metadata_Of_Last_CSV').output.structure,activity('Get_Metadata_Of_Current_CSV').output.structure)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait And Continue 3",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Alert Equal Number But Different Names Or Arrangement",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Get_Metadata_Of_Current_Staging_Table",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LoadIntoStagingTable_SynapseWithSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SqlDbStagingSink",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure",
								"columnCount"
							]
						}
					},
					{
						"name": "Get_Metadata_Of_Previous_Staging_Table",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LoadIntoStagingTable_SynapseWithSQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "save_sql_schema_to_detect_datatype_change",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure",
								"columnCount"
							]
						}
					},
					{
						"name": "Compare Data Type",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Get_Metadata_Of_Current_Staging_Table",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get_Metadata_Of_Previous_Staging_Table",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('index')),min(sub(activity('Get_Metadata_Of_Current_Staging_Table').output.columnCount,1),sub(activity('Get_Metadata_Of_Previous_Staging_Table').output.columnCount,1)))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Increment",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "increment",
										"value": {
											"value": "@string(add(int(variables('index')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Index",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Increment",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "index",
										"value": {
											"value": "@variables('increment')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Check Data Type Change",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Index",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(activity('Get_Metadata_Of_Current_Staging_Table').output.structure[int(variables('index'))].physicalName,activity('Get_Metadata_Of_Previous_Staging_Table').output.structure[int(variables('index'))].physicalName),not(equals(activity('Get_Metadata_Of_Current_Staging_Table').output.structure[int(variables('index'))].physicalType,activity('Get_Metadata_Of_Previous_Staging_Table').output.structure[int(variables('index'))].physicalType)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait And Continue 4",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Change In Data Type",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "dataTypeChange",
													"value": "True"
												}
											}
										]
									}
								}
							],
							"timeout": "7.00:00:00"
						}
					},
					{
						"name": "Alert If Change In Data Type",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Compare Data Type",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('dataTypeChange'),'True')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait And Continue 5",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Alert Change In Data Type",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Save Current Sql Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Retain Last Sql Schema",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF OBJECT_ID('[save_schema].[detect_datatype_change]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [save_schema].[detect_datatype_change]; \n\nEND",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlDbStagingSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "save_sql_schema_to_detect_datatype_change",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Retain Last Sql Schema",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Alert If Change In Data Type",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF OBJECT_ID('[retain_schema].[compare_datatype_change]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [retain_schema].[compare_datatype_change];\n\nEND",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "save_sql_schema_to_detect_datatype_change",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "retain_sql_schema_to_compare_datatype_change",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"variables": {
					"index": {
						"type": "String",
						"defaultValue": "-1"
					},
					"increment": {
						"type": "String"
					},
					"dataTypeChange": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"folder": {
					"name": "CovidBritishColumbia"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-01T07:18:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
				"[concat(variables('factoryId'), '/datasets/SqlDbStagingSource')]",
				"[concat(variables('factoryId'), '/dataflows/LoadIntoStagingTable_SynapseWithSQL_from_DataShare')]",
				"[concat(variables('factoryId'), '/linkedServices/customerStorageLinkedService')]",
				"[concat(variables('factoryId'), '/dataflows/LoadIntoOperationalTable_SynapseWithSQL')]",
				"[concat(variables('factoryId'), '/datasets/save_current_schema_dataset')]",
				"[concat(variables('factoryId'), '/datasets/retain_last_schema_dataset')]",
				"[concat(variables('factoryId'), '/datasets/source_dataset')]",
				"[concat(variables('factoryId'), '/datasets/SqlDbStagingSink')]",
				"[concat(variables('factoryId'), '/datasets/save_sql_schema_to_detect_datatype_change')]",
				"[concat(variables('factoryId'), '/datasets/retain_sql_schema_to_compare_datatype_change')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsStagingTableSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalyticsStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sinks"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "stagingBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalyticsStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsStagingTableSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalyticsStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sources"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "stagingBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseAnalyticsStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlDbStagingSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sinks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "stagingBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlDbStagingSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sources"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "stagingBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlOperationalSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sinks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "operationalBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseOperationalTable_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseOperational",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sinks"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "BritishColumbia",
					"table": "operationalBritishColumbia"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSynapseOperational')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retain_last_schema_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Schema"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "to_compare_schema.csv",
						"container": "schemas-for-comparison"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/retain_sql_schema_to_compare_datatype_change')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Schema"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "retain_schema",
					"table": "compare_datatype_change"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/save_current_schema_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "customerStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Schema"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "to_detect_schema_change.csv",
						"container": "schemas-for-comparison"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/customerStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/save_sql_schema_to_detect_datatype_change')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Schema"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "save_schema",
					"table": "detect_datatype_change"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "source_linkedservice",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CovidBritishColumbia/Sources"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "covid_tracking.csv",
						"folderPath": "curated/covid-19/covid_BritishColumbia/latest",
						"container": "receivedcopy"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/source_linkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseAnalyticsStaging')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalyticsStaging_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSynapseOperational')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseOperational_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('customerStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/publicStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('publicStorageLinkedService_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_linkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('source_linkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseAndSqlDataLoaderWithDataSharePipelineTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SynapseAndSqlDataLoaderWithDataShare",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2020-10-01 07:17:50Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SynapseAndSqlDataLoaderWithDataShare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadIntoOperationalTable_SynapseWithSQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CovidBritishColumbia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsStagingTableSource",
								"type": "DatasetReference"
							},
							"name": "sourceSynapseStagingTable"
						},
						{
							"dataset": {
								"referenceName": "SqlDbStagingSource",
								"type": "DatasetReference"
							},
							"name": "sourceSqlDbStaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseOperationalTable_sink",
								"type": "DatasetReference"
							},
							"name": "SynapseOperationalTable"
						},
						{
							"dataset": {
								"referenceName": "SqlOperationalSink",
								"type": "DatasetReference"
							},
							"name": "SqlOperationalSink"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceSynapseStagingTable\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSqlDbStaging\nsourceSynapseStagingTable sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tpostSQLs:['\\n'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tt: true) ~> SynapseOperationalTable\nsourceSqlDbStaging sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SqlOperationalSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
				"[concat(variables('factoryId'), '/datasets/SqlDbStagingSource')]",
				"[concat(variables('factoryId'), '/datasets/SynapseOperationalTable_sink')]",
				"[concat(variables('factoryId'), '/datasets/SqlOperationalSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadIntoStagingTable_SynapseWithSQL_from_DataShare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "CovidBritishColumbia"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source_dataset",
								"type": "DatasetReference"
							},
							"name": "SourceCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsStagingTableSink",
								"type": "DatasetReference"
							},
							"name": "SynapseStagingSink"
						},
						{
							"dataset": {
								"referenceName": "SqlDbStagingSink",
								"type": "DatasetReference"
							},
							"name": "SQLStagingSink"
						}
					],
					"transformations": [
						{
							"name": "CleanData"
						}
					],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseStagingSink\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLStagingSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_dataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureSynapseAnalyticsStagingTableSink')]",
				"[concat(variables('factoryId'), '/datasets/SqlDbStagingSink')]"
			]
		}
	]
}